{"version":3,"file":"static/js/533.53d80d22.chunk.js","mappings":"iKAEA,MA+IA,EA/IaA,KACX,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,OAEnCK,EAAAA,EAAAA,YAAU,KACeC,WACrB,IACE,MAAMC,EAAQC,aAAaC,QAAQ,aACnC,IAAKF,EACH,MAAM,IAAIG,MAAM,wCAGlB,MAAMC,QAAiBC,MAAM,4CAA4CL,KACnEM,QAAaF,EAASG,OAE5B,IAAKC,MAAMC,QAAQH,GACjB,MAAM,IAAIH,MAAM,qCAGlB,MAAMO,EAAeC,EAAkBL,GAEvCd,EAAakB,GACbf,GAAa,EACf,CAAE,MAAOC,GACPgB,QAAQhB,MAAM,6BAA8BA,GAC5CC,EAASD,EAAMiB,SACflB,GAAa,EACf,GAGFmB,EAAgB,GACf,IAGH,MAAMH,EAAqBI,IACzB,MAAML,EAAe,CAAC,EAUtB,OARAK,EAAMC,SAASC,IACTP,EAAaO,EAAKC,OACpBR,EAAaO,EAAKC,OAAOC,UAAYF,EAAKE,SAE1CT,EAAaO,EAAKC,OAAS,IAAKD,EAClC,IAGKG,OAAOC,OAAOX,EAAa,EAoDpC,OAAIhB,GACK4B,EAAAA,EAAAA,KAAA,KAAAC,SAAG,eAIR3B,GACK4B,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,UAAQ3B,MAKlB0B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,wBAAuBF,SACd,IAArBhC,EAAUmC,QACTJ,EAAAA,EAAAA,KAAA,MAAIG,UAAU,wBAAuBF,SAAC,mBAEtCC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAIG,UAAU,wBAAuBF,SAAC,qBACtCD,EAAAA,EAAAA,KAAA,OAAKG,UAAU,4DAA2DF,SACvEhC,EAAUoC,KAAKV,IACdO,EAAAA,EAAAA,MAAA,OAA0BC,UAAU,kCAAiCF,SAAA,EACnED,EAAAA,EAAAA,KAAA,OAAKM,IAAKX,EAAKY,MAAOC,IAAKb,EAAKC,MAAOO,UAAU,mCACjDH,EAAAA,EAAAA,KAAA,MAAIG,UAAU,2BAA0BF,SAAEN,EAAKC,SAC/CM,EAAAA,EAAAA,MAAA,KAAGC,UAAU,gBAAeF,SAAA,CAAC,WAASN,EAAKc,MAAMC,QAAQ,OACzDR,EAAAA,EAAAA,MAAA,KAAGC,UAAU,gBAAeF,SAAA,CAAC,aAAWN,EAAKE,aAC7CG,EAAAA,EAAAA,KAAA,UACEG,UAAU,gEACVQ,QAASA,IA1ENlC,WACjB,IACE,MAAMC,EAAQC,aAAaC,QAAQ,aASnC,WARuBG,MAAM,wCAAyC,CACpE6B,OAAQ,SACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEtC,QAAOuC,oBAGlBC,GACZ,MAAM,IAAIrC,MAAM,yBAIlBX,GAAciD,GACZA,EAAUC,QAAQzB,GAASA,EAAKC,QAAUqB,KAE9C,CAAE,MAAO3C,GACPgB,QAAQhB,MAAM,uBAAwBA,EACxC,GAqD6B+C,CAAW1B,EAAKC,OAAOK,SACvC,aARON,EAAK2B,gBAcnBtB,EAAAA,EAAAA,KAAA,UACEG,UAAU,gEACVQ,QA1DQlC,UAChB,IACE,MAAMC,EAAQC,aAAaC,QAAQ,aASnC,WARuBG,MAAM,uCAAwC,CACnE6B,OAAQ,SACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEtC,aAGXwC,GACZ,MAAM,IAAIrC,MAAM,4BAIlBX,EAAa,GACf,CAAE,MAAOI,GACPgB,QAAQhB,MAAM,uBAAwBA,EACxC,GAuC2B2B,SACpB,mBAKD,C","sources":["pages/Cart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Cart = () => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchCartItems = async () => {\r\n      try {\r\n        const email = localStorage.getItem('userEmail');\r\n        if (!email) {\r\n          throw new Error(\"User email not found in localStorage\");\r\n        }\r\n\r\n        const response = await fetch(`http://localhost:5000/cart/getCart?email=${email}`);\r\n        const data = await response.json();\r\n\r\n        if (!Array.isArray(data)) {\r\n          throw new Error(\"Fetched cart data is not an array\");\r\n        }\r\n\r\n        const groupedItems = groupItemsByTitle(data);\r\n\r\n        setCartItems(groupedItems); // Set the grouped items to state\r\n        setIsLoading(false); // Stop the loading state\r\n      } catch (error) {\r\n        console.error('Error fetching cart items:', error);\r\n        setError(error.message);\r\n        setIsLoading(false); // Stop the loading state even on error\r\n      }\r\n    };\r\n\r\n    fetchCartItems();\r\n  }, []);\r\n\r\n  // Function to group items by title and sum the quantities\r\n  const groupItemsByTitle = (items) => {\r\n    const groupedItems = {};\r\n\r\n    items.forEach((item) => {\r\n      if (groupedItems[item.title]) {\r\n        groupedItems[item.title].quantity += item.quantity;\r\n      } else {\r\n        groupedItems[item.title] = { ...item };\r\n      }\r\n    });\r\n\r\n    return Object.values(groupedItems); // Return array of unique items\r\n  };\r\n\r\n  // Function to handle item removal\r\n  const removeItem = async (productTitle) => {\r\n    try {\r\n      const email = localStorage.getItem('userEmail');\r\n      const response = await fetch(`http://localhost:5000/cart/deleteItem`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, productTitle }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to delete item\");\r\n      }\r\n\r\n      // Update the cart after removing the item\r\n      setCartItems((prevItems) =>\r\n        prevItems.filter((item) => item.title !== productTitle)\r\n      );\r\n    } catch (error) {\r\n      console.error('Error removing item:', error);\r\n    }\r\n  };\r\n\r\n  // Function to handle clearing the entire cart\r\n  const clearCart = async () => {\r\n    try {\r\n      const email = localStorage.getItem('userEmail');\r\n      const response = await fetch(`http://localhost:5000/cart/deleteAll`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to clear the cart\");\r\n      }\r\n\r\n      // Clear the cart in the state\r\n      setCartItems([]);\r\n    } catch (error) {\r\n      console.error('Error clearing cart:', error);\r\n    }\r\n  };\r\n\r\n  // Render loading state\r\n  if (isLoading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  // Render error state\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n  // Render empty cart message or items\r\n  return (\r\n    <div className=\"container mx-auto p-4\">\r\n      {cartItems.length === 0 ? (\r\n        <h2 className=\"text-xl font-semibold\">Cart is empty</h2>\r\n      ) : (\r\n        <div>\r\n          <h2 className=\"text-xl font-semibold\">Your items are:</h2>\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mt-4\">\r\n            {cartItems.map((item) => (\r\n              <div key={item.productId} className=\"border rounded-lg p-4 shadow-md\">\r\n                <img src={item.image} alt={item.title} className=\"w-full h-48 object-cover mb-2\" />\r\n                <h3 className=\"text-lg font-medium mb-2\">{item.title}</h3>\r\n                <p className=\"text-gray-700\">Price: ${item.price.toFixed(2)}</p>\r\n                <p className=\"text-gray-700\">Quantity: {item.quantity}</p>\r\n                <button\r\n                  className=\"bg-red-500 text-white px-4 py-2 mt-2 rounded hover:bg-red-700\"\r\n                  onClick={() => removeItem(item.title)}\r\n                >\r\n                  Remove\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <button\r\n            className=\"bg-red-600 text-white px-4 py-2 mt-4 rounded hover:bg-red-800\"\r\n            onClick={clearCart}\r\n          >\r\n            Clear Cart\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n"],"names":["Cart","cartItems","setCartItems","useState","isLoading","setIsLoading","error","setError","useEffect","async","email","localStorage","getItem","Error","response","fetch","data","json","Array","isArray","groupedItems","groupItemsByTitle","console","message","fetchCartItems","items","forEach","item","title","quantity","Object","values","_jsx","children","_jsxs","className","length","map","src","image","alt","price","toFixed","onClick","method","headers","body","JSON","stringify","productTitle","ok","prevItems","filter","removeItem","productId"],"sourceRoot":""}